spring.application.name=Spring Boot with Oauth

### server port
server.port=8080

#client registration configuration
keycloak.authorization.grant.type=password
keycloak.authorization.grant.type.auth=authorization_code
keycloak.client.id=springboot-openid-client-app
keycloak.client.secret=sIuZRuLY6hFZWi1bFDeXDSuHfU9fCmsa
spring.security.oauth2.client.registration.keycloak.client-id=${keycloak.client.id}
spring.security.oauth2.client.registration.keycloak.client-secret=${keycloak.client.secret}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=${keycloak.authorization.grant.type.auth}
spring.security.oauth2.client.registration.keycloak.scope=openid

#OIDC provider configuration:
keycloak.enabled=true
keycloak.realms.name=Keycloak_Springboot
keycloak.domain=http://localhost:8180
keycloak.auth=${keycloak.domain}/auth
keycloak.url=${keycloak.auth}/realms/${keycloak.realms.name}
spring.security.oauth2.client.provider.keycloak.issuer-uri=${keycloak.url}
#spring.security.oauth2.client.registration.keycloak.redirect-uri=${keycloak.domain}/login/oauth2/code/${keycloak.client.id}

spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

#validating JWT token against our Keycloak server
spring.security.oauth2.resourceserver.jwt.issuer-uri=${keycloak.url}

#session timeout
server.servlet.session.timeout=30m

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=keycloak
spring.datasource.password=password
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.mode=always
spring.sql.init.continue-on-error=true

keycloak.auth-server-url=${keycloak.auth}
keycloak.realm=${keycloak.realms.name}
keycloak.resource=${keycloak.client.id}
keycloak.credentials.secret=${keycloak.client.secret}
keycloak.ssl-required=external
keycloak.confidential-port=0

logging.level.root=INFO